

/* Definition section */
%{
    #include "compiler_common.h"
    #include "y.tab.h"	/* header file generated by bison */
    extern YYSTYPE yylval;

    #define YY_NO_UNPUT
    #define YY_NO_INPUT
    #define XXX printf("not implemented yet!\n")
%}

/* Define regular expression label */
letter [a-zA-Z_]
digit [0-9]
id {letter}+({letter}|{digit})*
inumber {digit}+
fnumber ({digit}*\.{digit}+)
string_lit [^\"]+

%x CMT
%x STRCOND
%x STR_LIT STR_LIT_END MUL_COMMENT
%option yylineno

/* Rules section */
%%

"/*"        { BEGIN(CMT); }
<MUL_COMMENT>"*/"   { BEGIN(0);}
<MUL_COMMENT>"\n"   { 
                        //printf("line_mul_com1\n");
                    }
<CMT>"*/"   { BEGIN(INITIAL);}
<CMT>\n     { 
                //printf("line_mul_com2\n");
            }
<CMT>.      {;}
"//".*      {;}
"\""        { BEGIN(STRCOND);
                return '"';
            }
<STRCOND>"\""   { BEGIN(INITIAL);
                return '"';
            }
<STRCOND>[^\"]* { yylval.s_val = strdup(yytext);
                return STRING_LIT;
            }
<STR_LIT>{string_lit} { BEGIN(STR_LIT_END); return STRING_LIT;}
<STR_LIT>"\"" { BEGIN(0); return '"';}
<STR_LIT_END>"\"" { BEGIN(0); return '"';}
"str"       { return STR; }
">>"        { return RSHIFT; }
"<<"        { return LSHIFT; }
"+"         { return '+'; }
"-"         { return '-'; }
"*"         { return '*'; }
"/"         { return '/'; }
"%"         { return '%'; }
">"         { return '>'; }
"<"         { return '<'; }
">="        { return GEQ; }
"<="        { return LEQ; }
"=="        { return EQL; }
"!="        { return NEQ; }
"="         { return '='; }
"+="        { return ADD_ASSIGN; }
"-="        { return SUB_ASSIGN; }
"*="        { return MUL_ASSIGN; }
"/="        { return DIV_ASSIGN; }
"%="        { return REM_ASSIGN; }
"&&"        { return LAND; }
"||"        { return LOR; }
"!"         { return '!'; }
"&"         { return '&'; }
"|"         { return '|'; }
'~'         { return '~'; }
"("         { return '('; }
")"         { return ')'; }
"["         { return '['; }
"]"         { return ']'; }
"{"         { return '{'; }
"}"         { return '}'; }
":"         { return ':'; }
";"         { return ';'; }
","         { return ','; }
"->"        { return ARROW; }
"print"     { return PRINT; }
"println"   { return PRINTLN; }
"\.\."      { return DOTDOT; }
"as"        { return AS; }
"if"        { return IF; }
"else"      { return ELSE; }
"for"       { return FOR; }
"while"     { return WHILE; }
"loop"      {return LOOP; }
"i32"       { return INT; }
"f32"       { return FLOAT;}
"bool"      { return BOOL; }
"true"      { return TRUE; }
"false"     { return FALSE; }
"fn"        { return FUNC; }
"return"    { return RETURN; }
"let"       { return LET; }
"in"        { return IN; }
"mut"       { return MUT; }
"break"     { return BREAK; }
{inumber}   { yylval.i_val = atoi(yytext);
                return INT_LIT;
            }
{fnumber}   { yylval.f_val = atof(yytext);
                return FLOAT_LIT;
            }
{id}        { yylval.s_val = strdup(yytext); return ID;}
<<EOF>>     { static int once = 0;
                if (once++) {
                    yyterminate();
                }
                yylineno++;
                //printf("line_EOF\n");
            }
[ \t]+      {;}
"\n"        {
                //printf("line\n");
            }
%%
/*  C Code section */
int yywrap(void)
{
    return 1;
}